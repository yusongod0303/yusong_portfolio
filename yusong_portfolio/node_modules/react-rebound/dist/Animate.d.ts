import React from 'react';
import { AnimatableProps } from './style';
export interface AnimateAPI {
    setVelocity<Prop extends keyof AnimatableProps>(prop: Prop, value: AnimatableProps[Prop]): void;
    setCurrentValue<Prop extends keyof AnimatableProps>(prop: keyof AnimatableProps, value: AnimatableProps[Prop]): void;
    getCurrentValue<Prop extends keyof AnimatableProps>(prop: Prop): AnimatableProps[Prop];
}
export declare const Animate: React.ForwardRefExoticComponent<{
    animate?: boolean | undefined;
    tension?: number | undefined;
    friction?: number | undefined;
    delay?: number | undefined;
    displacementThreshold?: number | undefined;
    speedThreshold?: number | undefined;
    clamp?: boolean | undefined;
    onStart?: (() => void) | undefined;
    onEnd?: (() => void) | undefined;
    children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | ((animating: boolean) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>);
} & Partial<AnimatableProps> & React.RefAttributes<AnimateAPI>>;
